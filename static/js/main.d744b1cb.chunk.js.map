{"version":3,"sources":["components/WinnerText/WinnerText.tsx","strings.js","utils.ts","components/common/styledComponents.js","components/Wheel/styles.js","components/WheelCanvas/styles.js","components/WheelCanvas/index.tsx","components/Wheel/Wheel.tsx","components/PreparedWheel/PreparedWheel.tsx","assets/logo_vulkan.png","components/ResultString/ResultString.tsx","components/ResultTableHeader/ResultTableHeader.tsx","components/ResultTable/ResultTable.tsx","assets/arrow.svg","components/Drawing/Drawing.tsx","data.ts","components/Button/Button.tsx","components/Header/Header.tsx","components/Separator/Separator.tsx","components/Heading/Heading.tsx","components/PresentDescription/PresentDescription.tsx","components/PresentList/PresentList.tsx","components/AddNewPresent/AddNewPresent.tsx","components/WheelSpeed/WheelSpeed.tsx","components/ResetDrawingData/ResetDrawingData.tsx","components/ResetResultList/ResetResultList.tsx","components/ChangeTextDistance/ChangeTextDistance.tsx","components/Settings/Settings.tsx","App.tsx","index.tsx"],"names":["WinnerText","_ref","prizeResult","isShowWinnerText","React","createElement","className","concat","DEFAULT_BACKGROUND_COLORS","DEFAULT_TEXT_COLORS","WEB_FONTS","getRotationDegrees","prizeNumber","numberOfPrizes","randomDif","arguments","length","undefined","degreesPerPrize","initialRotation","randomDifference","Math","random","perfectRotation","imperfectRotation","prizeRotation","clamp","min","max","val","isCustomFont","font","includes","toLowerCase","getQuantity","prizeMap","slice","characters","NonDraggableImage","styled","img","_templateObject","_taggedTemplateLiteral","RouletteContainer","div","RotationContainer","_templateObject2","props","startRotationDegrees","classKey","_ref2","startSpinningTime","_ref3","_ref4","continueSpinningTime","_ref5","_ref6","_ref7","stopSpinningTime","_ref8","_ref9","_ref10","_ref11","finalRotationDegrees","RoulettePointerImage","_templateObject3","WheelCanvasStyle","canvas","drawRadialBorder","ctx","centerX","centerY","insideRadius","outsideRadius","angle","beginPath","moveTo","cos","sin","lineTo","closePath","stroke","WheelCanvas","width","height","data","outerBorderColor","outerBorderWidth","innerRadius","innerBorderColor","innerBorderWidth","radiusLineColor","radiusLineWidth","fontFamily","fontSize","perpendicularText","rouletteUpdater","textDistance","canvasRef","createRef","drawWheelProps","useEffect","QUANTITY","current","getContext","clearRect","strokeStyle","lineWidth","startAngle","contentRadius","i","_data$i","optionSize","style","arc","PI","endAngle","fillStyle","backgroundColor","fill","save","translate","contentRotationAngle","image","_data$i$image","_data$i$image2","_data$i$image3","_data$i$image4","_data$i$image5","landscape","rotate","_imageHTML","Image","drawImage","offsetX","offsetY","text","option","textColor","fillText","measureText","restore","drawWheel","ref","Wheel","mustStartSpinning","_ref$onStopSpinning","onStopSpinning","_ref$backgroundColors","backgroundColors","_ref$textColors","textColors","_ref$outerBorderColor","_ref$outerBorderWidth","_ref$innerRadius","_ref$innerBorderColor","_ref$innerBorderWidth","_ref$radiusLineColor","_ref$radiusLineWidth","_ref$fontFamily","_ref$fontSize","_ref$perpendicularTex","_ref$textDistance","_ref$spinDuration","spinDuration","_ref$startingOptionIn","startingOptionIndex","_useState","useState","_toConsumableArray","_useState2","_slicedToArray","wheelData","setWheelData","_useState3","_useState4","setPrizeMap","_useState5","_useState6","setStartRotationDegrees","_useState7","_useState8","setFinalRotationDegrees","_useState9","_useState10","hasStartedSpinning","setHasStartedSpinning","_useState11","_useState12","hasStoppedSpinning","setHasStoppedSpinning","_useState13","_useState14","isCurrentlySpinning","setIsCurrentlySpinning","_useState15","_useState16","isDataUpdated","setIsDataUpdated","_useState17","_useState18","setRouletteUpdater","_useState19","_useState20","loadedImagesCounter","setLoadedImagesCounter","_useState21","_useState22","totalImages","setTotalImages","_useState23","_useState24","isFontLoaded","setIsFontLoaded","mustStopSpinning","useRef","result","charactersLength","charAt","floor","makeClassKey","normalizedSpinDuration","totalSpinningTime","initialMapNum","auxPrizeMap","dataLength","wheelDataAux","fontsToFetch","trim","_loop","_data$i$style","_data$i$style$fontFam","_data$i$style2","_data$i$style3","_data$i$style4","_data$i$style5","fontArray","split","map","filter","push","apply","_objectSpread","j","prevCounter","src","uri","onload","_data$i$image6","_data$i$image7","sizeMultiplier","naturalWidth","naturalHeight","prevState","WebFont","load","google","families","Array","from","Set","timeout","fontactive","active","err","console","log","setStartingOption","_prizeMap$prizeNumber","startSpinning","selectedPrize","finalRotationDegreesCalculated","setTimeout","optionIndex","optionMap","_optionMap$idx","idx","startingOption","visibility","PreparedWheel","wheelSpeed","wheelStopped","getTimeWithZero","count","ResultString","strDate","date","Date","getHours","getMinutes","getSeconds","getCorrectDate","value","ResultTableHeader","ResultTable","resultList","key","Drawing","winnerText","mustSpin","drawingData","pressStartButton","handleSpinClick","saveToLocalState","setIsInitCondition","useLayoutEffect","onKeyDown","tabIndex","role","type","onClick","logoVulkan","alt","arrow","modes","testDrawingData","id","Button","_ref$classes","classes","Header","changeMode","Separator","Heading","PresentDescription","presentDescription","setPresentDescription","placeholder","onChange","target","PresentList","setDrawingData","Fragment","newDrawingData","indexOfOne","findIndex","splice","uniqid","deleteDrawingData","AddNewPresent","newDrawing","setNewDrawing","drawingArr","forEach","newValue","WheelSpeed","setWheelSpeed","name","String","ResetDrawingData","ResetResultList","resetResultList","ChangeTextDistance","setTextDistance","resAsNumber","Number","isNaN","Settings","App","lsPresentDescription","localStorage","getItem","lsWheelSpeed","lsDrawingData","lsResultList","initResultList","JSON","parse","initDrawingData","initWheelSpeed","initPresentDescription","setMustSpin","setPrizeResult","isInitCondition","mode","setMode","setResultList","winTextValue","setWinTextValue","newPrizeNumber","getDrawingData","wheelOption","saveResultToLs","list","setItem","stringify","e","code","_drawingData$prizeRes2","_drawingData$prizeRes","winRes","getWinnerText","newResultList","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d744b1cb.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\r\nimport './WinnerText.css';\r\n\r\ninterface IWinnerText {\r\n  prizeResult: string;\r\n  isShowWinnerText: boolean;\r\n}\r\n\r\nexport const WinnerText = ({\r\n  prizeResult,\r\n  isShowWinnerText,\r\n}: IWinnerText): ReactElement => (\r\n  <div className=\"winnerText\">\r\n    <p className=\"winnerTextValue\">\r\n      {isShowWinnerText && `Поздравляем, Вы выиграли ${prizeResult}`}\r\n      {!isShowWinnerText && `Крути колесо, получи приз!`}\r\n    </p>\r\n  </div>\r\n);\r\n","export const DEFAULT_BACKGROUND_COLORS = ['darkgrey', 'lightgrey'];\r\nexport const DEFAULT_TEXT_COLORS = ['black'];\r\nexport const DEFAULT_OUTER_BORDER_COLOR = 'black';\r\nexport const DEFAULT_OUTER_BORDER_WIDTH = 5;\r\nexport const DEFAULT_INNER_RADIUS = 0;\r\nexport const DEFAULT_INNER_BORDER_COLOR = 'black';\r\nexport const DEFAULT_INNER_BORDER_WIDTH = 0;\r\nexport const DEFAULT_RADIUS_LINE_COLOR = 'black';\r\nexport const DEFAULT_RADIUS_LINE_WIDTH = 5;\r\nexport const DEFAULT_FONT_FAMILY = 'Roboto Condensed';\r\nexport const DEFAULT_FONT_SIZE = 20;\r\nexport const DEFAULT_TEXT_DISTANCE = 60;\r\nexport const DEFAULT_SPIN_DURATION = 1.0;\r\nexport const WEB_FONTS = [\r\n  'Roboto Condensed',\r\n  'verdana',\r\n  'tahoma',\r\n  'trebuchet ms',\r\n  'times',\r\n  'garamond',\r\n  'brush script mt',\r\n  'courier new',\r\n  'georgia',\r\n  'helvetica',\r\n  'times new roman',\r\n  'serif',\r\n  'sans-serif',\r\n  'monospace',\r\n  'cursive',\r\n  'fantasy',\r\n];\r\n","import { WEB_FONTS } from './strings';\r\n\r\nexport const getRotationDegrees = (\r\n  prizeNumber: number,\r\n  numberOfPrizes: number,\r\n  randomDif = true\r\n): number => {\r\n  const degreesPerPrize = 360 / numberOfPrizes;\r\n\r\n  const initialRotation = 43 + degreesPerPrize / 2;\r\n\r\n  const randomDifference = (-1 + Math.random() * 2) * degreesPerPrize * 0.35;\r\n\r\n  const perfectRotation =\r\n    degreesPerPrize * (numberOfPrizes - prizeNumber) - initialRotation;\r\n\r\n  const imperfectRotation =\r\n    degreesPerPrize * (numberOfPrizes - prizeNumber) -\r\n    initialRotation +\r\n    randomDifference;\r\n\r\n  const prizeRotation = randomDif ? imperfectRotation : perfectRotation;\r\n\r\n  return numberOfPrizes - prizeNumber > numberOfPrizes / 2\r\n    ? -360 + prizeRotation\r\n    : prizeRotation;\r\n};\r\n\r\nexport const clamp = (min: number, max: number, val: number): number =>\r\n  Math.min(Math.max(min, +val), max);\r\n\r\nexport const isCustomFont = (font: string): boolean =>\r\n  !!font && !WEB_FONTS.includes(font.toLowerCase());\r\n\r\nexport const getQuantity = (prizeMap: number[][]): number =>\r\n  prizeMap.slice(-1)[0].slice(-1)[0] + 1;\r\n\r\nconst characters =\r\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\nexport const makeClassKey = (length: number): string => {\r\n  let result = '';\r\n  const charactersLength = characters.length;\r\n  for (let i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n\r\n  return result;\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const NonDraggableImage = styled.img`\r\n  -webkit-user-drag: none;\r\n  -khtml-user-drag: none;\r\n  -moz-user-drag: none;\r\n  -o-user-drag: none;\r\n  user-drag: none;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nimport { NonDraggableImage } from '../common/styledComponents';\r\n\r\nexport const RouletteContainer = styled.div`\r\n  position: relative;\r\n  width: 280px;\r\n  max-width: 450px;\r\n  height: 280px;\r\n  max-height: 450px;\r\n  object-fit: contain;\r\n  flex-shrink: 0;\r\n  z-index: 5;\r\n  pointer-events: none;\r\n  transform: rotate(220deg);\r\n  @media (min-width: 480px) {\r\n    height: 650px;\r\n    width: 650px;\r\n  }\r\n  @media (min-width: 1200px) {\r\n    width: 80vw;\r\n    max-width: 700px;\r\n    height: 80vw;\r\n    max-height: 700px;\r\n  }\r\n`;\r\n\r\nexport const RotationContainer = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  left: 0px;\r\n  right: 0px;\r\n  top: 0px;\r\n  bottom: 0px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  transform: rotate(${props => props.startRotationDegrees}deg);\r\n\r\n  &.started-spinning {\r\n    animation: spin-${({ classKey }) => classKey} ${({ startSpinningTime }) =>\r\n          startSpinningTime / 1000}s cubic-bezier(0.71, -0.29, 0.96, 0.9) 0s 1 normal\r\n        forwards running,\r\n      continueSpin-${({ classKey }) => classKey} ${({ continueSpinningTime }) =>\r\n          continueSpinningTime / 1000}s linear ${({ startSpinningTime }) =>\r\n          startSpinningTime / 1000}s 1 normal forwards running,\r\n      stopSpin-${({ classKey }) => classKey} ${({ stopSpinningTime }) =>\r\n          stopSpinningTime / 1000}s cubic-bezier(0, 0, 0.35, 1.02) ${({\r\n          startSpinningTime,\r\n          continueSpinningTime,\r\n        }) => (startSpinningTime + continueSpinningTime) / 1000}s 1 normal forwards\r\n        running;\r\n  }\r\n\r\n  @keyframes spin-${({ classKey }) => classKey} {\r\n    from {\r\n      transform: rotate(${props => props.startRotationDegrees}deg);\r\n    }\r\n    to {\r\n      transform: rotate(${props => props.startRotationDegrees + 360}deg);\r\n    }\r\n  }\r\n  @keyframes continueSpin-${({ classKey }) => classKey} {\r\n    from {\r\n      transform: rotate(${props => props.startRotationDegrees}deg);\r\n    }\r\n    to {\r\n      transform: rotate(${props => props.startRotationDegrees + 360}deg);\r\n    }\r\n  }\r\n  @keyframes stopSpin-${({ classKey }) => classKey} {\r\n    from {\r\n      transform: rotate(${props => props.startRotationDegrees}deg);\r\n    }\r\n    to {\r\n      transform: rotate(${props => 1440 + props.finalRotationDegrees}deg);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const RoulettePointerImage = styled(NonDraggableImage)`\r\n  position: absolute;\r\n  width: 10%;\r\n  transform: rotate(50deg);\r\n  z-index: 5;\r\n  @media (min-width: 480px) {\r\n    top: 200px;\r\n    left: -55px;\r\n  }\r\n  @media (min-width: 1200px) {\r\n    top: 315px;\r\n    left: -80px;\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const WheelCanvasStyle = styled.canvas`\r\n  width: 98%;\r\n  height: 98%;\r\n`;\r\n","import React, { createRef, RefObject, useEffect } from 'react';\r\n\r\nimport { WheelCanvasStyle } from './styles';\r\nimport { WheelData } from '../Wheel/types';\r\nimport { clamp, getQuantity } from '../../utils';\r\n\r\ninterface WheelCanvasProps extends DrawWheelProps {\r\n  width: string;\r\n  height: string;\r\n  data: WheelData[];\r\n}\r\n\r\ninterface DrawWheelProps {\r\n  outerBorderColor: string;\r\n  outerBorderWidth: number;\r\n  innerRadius: number;\r\n  innerBorderColor: string;\r\n  innerBorderWidth: number;\r\n  radiusLineColor: string;\r\n  radiusLineWidth: number;\r\n  fontFamily: string;\r\n  fontSize: number;\r\n  perpendicularText: boolean;\r\n  prizeMap: number[][];\r\n  rouletteUpdater: boolean;\r\n  textDistance: number;\r\n}\r\n\r\nconst drawRadialBorder = (\r\n  ctx: CanvasRenderingContext2D,\r\n  centerX: number,\r\n  centerY: number,\r\n  insideRadius: number,\r\n  outsideRadius: number,\r\n  angle: number\r\n) => {\r\n  ctx.beginPath();\r\n  ctx.moveTo(\r\n    centerX + (insideRadius + 1) * Math.cos(angle),\r\n    centerY + (insideRadius + 1) * Math.sin(angle)\r\n  );\r\n  ctx.lineTo(\r\n    centerX + (outsideRadius - 1) * Math.cos(angle),\r\n    centerY + (outsideRadius - 1) * Math.sin(angle)\r\n  );\r\n  ctx.closePath();\r\n  ctx.stroke();\r\n};\r\n\r\nconst drawWheel = (\r\n  canvasRef: RefObject<HTMLCanvasElement>,\r\n  data: WheelData[],\r\n  drawWheelProps: DrawWheelProps\r\n) => {\r\n  /* eslint-disable prefer-const */\r\n  let {\r\n    outerBorderColor,\r\n    outerBorderWidth,\r\n    innerRadius,\r\n    innerBorderColor,\r\n    innerBorderWidth,\r\n    radiusLineColor,\r\n    radiusLineWidth,\r\n    fontFamily,\r\n    fontSize,\r\n    perpendicularText,\r\n    prizeMap,\r\n    textDistance,\r\n  } = drawWheelProps;\r\n\r\n  const QUANTITY = getQuantity(prizeMap);\r\n\r\n  outerBorderWidth *= 2;\r\n  innerBorderWidth *= 2;\r\n  radiusLineWidth *= 2;\r\n\r\n  const canvas = canvasRef.current;\r\n  if (canvas?.getContext('2d')) {\r\n    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n    ctx.clearRect(0, 0, 500, 500);\r\n    ctx.strokeStyle = 'transparent';\r\n    ctx.lineWidth = 0;\r\n\r\n    let startAngle = 0;\r\n    const outsideRadius = canvas.width / 2 - 10;\r\n\r\n    const clampedContentDistance = clamp(0, 100, textDistance);\r\n    const contentRadius = (outsideRadius * clampedContentDistance) / 100;\r\n\r\n    const clampedInsideRadius = clamp(0, 100, innerRadius);\r\n    const insideRadius = (outsideRadius * clampedInsideRadius) / 100;\r\n\r\n    const centerX = canvas.width / 2;\r\n    const centerY = canvas.height / 2;\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const { optionSize, style } = data[i];\r\n\r\n      const arc =\r\n        (optionSize && (optionSize * (2 * Math.PI)) / QUANTITY) ||\r\n        (2 * Math.PI) / QUANTITY;\r\n      const endAngle = startAngle + arc;\r\n\r\n      ctx.fillStyle = (style && style.backgroundColor) as string;\r\n\r\n      ctx.beginPath();\r\n      ctx.arc(centerX, centerY, outsideRadius, startAngle, endAngle, false);\r\n      ctx.arc(centerX, centerY, insideRadius, endAngle, startAngle, true);\r\n      ctx.stroke();\r\n      ctx.fill();\r\n      ctx.save();\r\n\r\n      // WHEEL RADIUS LINES\r\n      ctx.strokeStyle = radiusLineWidth <= 0 ? 'transparent' : radiusLineColor;\r\n      ctx.lineWidth = radiusLineWidth;\r\n      drawRadialBorder(\r\n        ctx,\r\n        centerX,\r\n        centerY,\r\n        insideRadius,\r\n        outsideRadius,\r\n        startAngle\r\n      );\r\n      if (i === data.length - 1) {\r\n        drawRadialBorder(\r\n          ctx,\r\n          centerX,\r\n          centerY,\r\n          insideRadius,\r\n          outsideRadius,\r\n          endAngle\r\n        );\r\n      }\r\n\r\n      // WHEEL OUTER BORDER\r\n      ctx.strokeStyle =\r\n        outerBorderWidth <= 0 ? 'transparent' : outerBorderColor;\r\n      ctx.lineWidth = outerBorderWidth;\r\n      ctx.beginPath();\r\n      ctx.arc(\r\n        centerX,\r\n        centerY,\r\n        outsideRadius - ctx.lineWidth / 2,\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n      ctx.closePath();\r\n      ctx.stroke();\r\n\r\n      // WHEEL INNER BORDER\r\n      ctx.strokeStyle =\r\n        innerBorderWidth <= 0 ? 'transparent' : innerBorderColor;\r\n      ctx.lineWidth = innerBorderWidth;\r\n      ctx.beginPath();\r\n      ctx.arc(\r\n        centerX,\r\n        centerY,\r\n        insideRadius + ctx.lineWidth / 2 - 1,\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n      ctx.closePath();\r\n      ctx.stroke();\r\n\r\n      // CONTENT FILL\r\n      ctx.translate(\r\n        centerX + Math.cos(startAngle + arc / 2) * contentRadius,\r\n        centerY + Math.sin(startAngle + arc / 2) * contentRadius\r\n      );\r\n      let contentRotationAngle = startAngle + arc / 2;\r\n\r\n      if (data[i].image) {\r\n        // CASE IMAGE\r\n        contentRotationAngle +=\r\n          data[i].image && !data[i].image?.landscape ? Math.PI / 2 : 0;\r\n        ctx.rotate(contentRotationAngle);\r\n\r\n        const img = data[i].image?._imageHTML || new Image();\r\n        ctx.drawImage(\r\n          img,\r\n          (img.width + (data[i].image?.offsetX || 0)) / -2,\r\n          -(\r\n            img.height -\r\n            (data[i].image?.landscape ? 0 : 90) + // offsetY correction for non landscape images\r\n            (data[i].image?.offsetY || 0)\r\n          ) / 2,\r\n          img.width,\r\n          img.height\r\n        );\r\n      } else {\r\n        // CASE TEXT\r\n        contentRotationAngle += perpendicularText ? Math.PI / 2 : 0;\r\n        ctx.rotate(contentRotationAngle);\r\n\r\n        const text = data[i].option;\r\n        ctx.font = `bold ${(style?.fontSize || fontSize) * 2}px ${\r\n          style?.fontFamily || fontFamily\r\n        }, Roboto Condensed`;\r\n        ctx.fillStyle = (style && style.textColor) as string;\r\n        ctx.fillText(\r\n          text || '',\r\n          -ctx.measureText(text || '').width / 2,\r\n          fontSize / 2.7\r\n        );\r\n      }\r\n\r\n      ctx.restore();\r\n\r\n      startAngle = endAngle;\r\n    }\r\n  }\r\n};\r\n\r\nconst WheelCanvas = ({\r\n  width,\r\n  height,\r\n  data,\r\n  outerBorderColor,\r\n  outerBorderWidth,\r\n  innerRadius,\r\n  innerBorderColor,\r\n  innerBorderWidth,\r\n  radiusLineColor,\r\n  radiusLineWidth,\r\n  fontFamily,\r\n  fontSize,\r\n  perpendicularText,\r\n  prizeMap,\r\n  rouletteUpdater,\r\n  textDistance,\r\n}: WheelCanvasProps): JSX.Element => {\r\n  const canvasRef = createRef<HTMLCanvasElement>();\r\n  const drawWheelProps = {\r\n    outerBorderColor,\r\n    outerBorderWidth,\r\n    innerRadius,\r\n    innerBorderColor,\r\n    innerBorderWidth,\r\n    radiusLineColor,\r\n    radiusLineWidth,\r\n    fontFamily,\r\n    fontSize,\r\n    perpendicularText,\r\n    prizeMap,\r\n    rouletteUpdater,\r\n    textDistance,\r\n  };\r\n\r\n  useEffect(() => {\r\n    drawWheel(canvasRef, data, drawWheelProps);\r\n  }, [canvasRef, data, drawWheelProps, rouletteUpdater]);\r\n\r\n  return <WheelCanvasStyle ref={canvasRef} width={width} height={height} />;\r\n};\r\n\r\nexport default WheelCanvas;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport WebFont from 'webfontloader';\r\n\r\nimport {\r\n  getQuantity,\r\n  getRotationDegrees,\r\n  isCustomFont,\r\n  makeClassKey,\r\n} from '../../utils';\r\nimport { RotationContainer, RouletteContainer } from './styles';\r\nimport {\r\n  DEFAULT_BACKGROUND_COLORS,\r\n  DEFAULT_FONT_FAMILY,\r\n  DEFAULT_FONT_SIZE,\r\n  DEFAULT_INNER_BORDER_COLOR,\r\n  DEFAULT_INNER_BORDER_WIDTH,\r\n  DEFAULT_INNER_RADIUS,\r\n  DEFAULT_OUTER_BORDER_COLOR,\r\n  DEFAULT_OUTER_BORDER_WIDTH,\r\n  DEFAULT_RADIUS_LINE_COLOR,\r\n  DEFAULT_RADIUS_LINE_WIDTH,\r\n  DEFAULT_SPIN_DURATION,\r\n  DEFAULT_TEXT_COLORS,\r\n  DEFAULT_TEXT_DISTANCE,\r\n  WEB_FONTS,\r\n} from '../../strings';\r\nimport { WheelData } from './types';\r\nimport WheelCanvas from '../WheelCanvas';\r\n\r\ninterface Props {\r\n  mustStartSpinning: boolean;\r\n  prizeNumber: number;\r\n  data: WheelData[];\r\n  onStopSpinning?: () => any;\r\n  backgroundColors?: string[];\r\n  textColors?: string[];\r\n  outerBorderColor?: string;\r\n  outerBorderWidth?: number;\r\n  innerRadius?: number;\r\n  innerBorderColor?: string;\r\n  innerBorderWidth?: number;\r\n  radiusLineColor?: string;\r\n  radiusLineWidth?: number;\r\n  fontFamily?: string;\r\n  fontSize?: number;\r\n  perpendicularText?: boolean;\r\n  textDistance?: number;\r\n  spinDuration?: number;\r\n  startingOptionIndex?: number;\r\n}\r\n\r\nconst STARTED_SPINNING = 'started-spinning';\r\n\r\nconst START_SPINNING_TIME = 2600;\r\nconst CONTINUE_SPINNING_TIME = 750;\r\nconst STOP_SPINNING_TIME = 8000;\r\n\r\nexport const Wheel = ({\r\n  mustStartSpinning,\r\n  prizeNumber,\r\n  data,\r\n  onStopSpinning = () => null,\r\n  backgroundColors = DEFAULT_BACKGROUND_COLORS,\r\n  textColors = DEFAULT_TEXT_COLORS,\r\n  outerBorderColor = DEFAULT_OUTER_BORDER_COLOR,\r\n  outerBorderWidth = DEFAULT_OUTER_BORDER_WIDTH,\r\n  innerRadius = DEFAULT_INNER_RADIUS,\r\n  innerBorderColor = DEFAULT_INNER_BORDER_COLOR,\r\n  innerBorderWidth = DEFAULT_INNER_BORDER_WIDTH,\r\n  radiusLineColor = DEFAULT_RADIUS_LINE_COLOR,\r\n  radiusLineWidth = DEFAULT_RADIUS_LINE_WIDTH,\r\n  fontFamily = WEB_FONTS[0],\r\n  fontSize = DEFAULT_FONT_SIZE,\r\n  perpendicularText = false,\r\n  textDistance = DEFAULT_TEXT_DISTANCE,\r\n  spinDuration = DEFAULT_SPIN_DURATION,\r\n  startingOptionIndex = -1,\r\n}: Props): JSX.Element | null => {\r\n  const [wheelData, setWheelData] = useState<WheelData[]>([...data]);\r\n  const [prizeMap, setPrizeMap] = useState<number[][]>([[0]]);\r\n  const [startRotationDegrees, setStartRotationDegrees] = useState(0);\r\n  const [finalRotationDegrees, setFinalRotationDegrees] = useState(0);\r\n  const [hasStartedSpinning, setHasStartedSpinning] = useState(false);\r\n  const [hasStoppedSpinning, setHasStoppedSpinning] = useState(false);\r\n  const [isCurrentlySpinning, setIsCurrentlySpinning] = useState(false);\r\n  const [isDataUpdated, setIsDataUpdated] = useState(false);\r\n  const [rouletteUpdater, setRouletteUpdater] = useState(false);\r\n  const [loadedImagesCounter, setLoadedImagesCounter] = useState(0);\r\n  const [totalImages, setTotalImages] = useState(0);\r\n  const [isFontLoaded, setIsFontLoaded] = useState(false);\r\n  const mustStopSpinning = useRef<boolean>(false);\r\n\r\n  const classKey = makeClassKey(5);\r\n\r\n  const normalizedSpinDuration = Math.max(0.01, spinDuration);\r\n\r\n  const startSpinningTime = START_SPINNING_TIME * normalizedSpinDuration;\r\n  const continueSpinningTime = CONTINUE_SPINNING_TIME * normalizedSpinDuration;\r\n  const stopSpinningTime = STOP_SPINNING_TIME * normalizedSpinDuration;\r\n\r\n  const totalSpinningTime =\r\n    startSpinningTime + continueSpinningTime + stopSpinningTime;\r\n\r\n  useEffect(() => {\r\n    let initialMapNum = 0;\r\n    const auxPrizeMap: number[][] = [];\r\n    const dataLength = data?.length || 0;\r\n    const wheelDataAux = [{ option: '', optionSize: 1 }] as WheelData[];\r\n    const fontsToFetch = isCustomFont(fontFamily?.trim()) ? [fontFamily] : [];\r\n\r\n    for (let i = 0; i < dataLength; i++) {\r\n      let fontArray = data[i]?.style?.fontFamily?.split(',') || [];\r\n      fontArray = fontArray.map(font => font.trim()).filter(isCustomFont);\r\n      fontsToFetch.push(...fontArray);\r\n\r\n      wheelDataAux[i] = {\r\n        ...data[i],\r\n        style: {\r\n          backgroundColor:\r\n            data[i].style?.backgroundColor ||\r\n            backgroundColors?.[i % backgroundColors?.length] ||\r\n            DEFAULT_BACKGROUND_COLORS[0],\r\n          fontFamily:\r\n            data[i].style?.fontFamily || fontFamily || DEFAULT_FONT_FAMILY,\r\n          fontSize: data[i].style?.fontSize || fontSize || DEFAULT_FONT_SIZE,\r\n          textColor:\r\n            data[i].style?.textColor ||\r\n            textColors?.[i % textColors?.length] ||\r\n            DEFAULT_TEXT_COLORS[0],\r\n        },\r\n      };\r\n      auxPrizeMap.push([]);\r\n      for (let j = 0; j < (wheelDataAux[i].optionSize || 1); j++) {\r\n        auxPrizeMap[i][j] = initialMapNum++;\r\n      }\r\n      if (data[i].image) {\r\n        setTotalImages(prevCounter => prevCounter + 1);\r\n\r\n        const img = new Image();\r\n        img.src = data[i].image?.uri || '';\r\n        img.onload = () => {\r\n          img.height = 200 * (data[i].image?.sizeMultiplier || 1);\r\n          img.width = (img.naturalWidth / img.naturalHeight) * img.height;\r\n          wheelDataAux[i].image = {\r\n            uri: data[i].image?.uri || '',\r\n            offsetX: data[i].image?.offsetX || 0,\r\n            offsetY: data[i].image?.offsetY || 0,\r\n            landscape: data[i].image?.landscape || false,\r\n            sizeMultiplier: data[i].image?.sizeMultiplier || 1,\r\n            _imageHTML: img,\r\n          };\r\n          setLoadedImagesCounter(prevCounter => prevCounter + 1);\r\n          setRouletteUpdater(prevState => !prevState);\r\n        };\r\n      }\r\n    }\r\n\r\n    if (fontsToFetch?.length > 0) {\r\n      try {\r\n        WebFont.load({\r\n          google: {\r\n            families: Array.from(new Set(fontsToFetch.filter(font => !!font))),\r\n          },\r\n          timeout: 1000,\r\n          fontactive() {\r\n            setRouletteUpdater(!rouletteUpdater);\r\n          },\r\n          active() {\r\n            setIsFontLoaded(true);\r\n            setRouletteUpdater(!rouletteUpdater);\r\n          },\r\n        });\r\n      } catch (err) {\r\n        console.log('Error loading webfonts:', err);\r\n      }\r\n    } else {\r\n      setIsFontLoaded(true);\r\n    }\r\n\r\n    setWheelData([...wheelDataAux]);\r\n    setPrizeMap(auxPrizeMap);\r\n    setStartingOption(startingOptionIndex, auxPrizeMap);\r\n    setIsDataUpdated(true);\r\n  }, [data, backgroundColors, textColors]);\r\n\r\n  useEffect(() => {\r\n    if (mustStartSpinning && !isCurrentlySpinning) {\r\n      setIsCurrentlySpinning(true);\r\n      startSpinning();\r\n      const selectedPrize =\r\n        prizeMap[prizeNumber][\r\n          Math.floor(Math.random() * prizeMap[prizeNumber]?.length)\r\n        ];\r\n      const finalRotationDegreesCalculated = getRotationDegrees(\r\n        selectedPrize,\r\n        getQuantity(prizeMap)\r\n      );\r\n      setFinalRotationDegrees(finalRotationDegreesCalculated);\r\n    }\r\n  }, [mustStartSpinning]);\r\n\r\n  useEffect(() => {\r\n    if (hasStoppedSpinning) {\r\n      setIsCurrentlySpinning(false);\r\n      setStartRotationDegrees(finalRotationDegrees);\r\n    }\r\n  }, [hasStoppedSpinning]);\r\n\r\n  const startSpinning = () => {\r\n    setHasStartedSpinning(true);\r\n    setHasStoppedSpinning(false);\r\n    mustStopSpinning.current = true;\r\n    setTimeout(() => {\r\n      if (mustStopSpinning.current) {\r\n        mustStopSpinning.current = false;\r\n        setHasStartedSpinning(false);\r\n        setHasStoppedSpinning(true);\r\n        onStopSpinning();\r\n      }\r\n    }, totalSpinningTime);\r\n  };\r\n\r\n  const setStartingOption = (optionIndex: number, optionMap: number[][]) => {\r\n    if (startingOptionIndex >= 0) {\r\n      const idx = Math.floor(optionIndex) % optionMap?.length;\r\n      const startingOption =\r\n        optionMap[idx][Math.floor(optionMap[idx]?.length / 2)];\r\n      setStartRotationDegrees(\r\n        getRotationDegrees(startingOption, getQuantity(optionMap), false)\r\n      );\r\n    }\r\n  };\r\n\r\n  const getRouletteClass = () => {\r\n    if (hasStartedSpinning) {\r\n      return STARTED_SPINNING;\r\n    }\r\n    return '';\r\n  };\r\n\r\n  if (!isDataUpdated) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <RouletteContainer\r\n      style={\r\n        !isFontLoaded ||\r\n        (totalImages > 0 && loadedImagesCounter !== totalImages)\r\n          ? { visibility: 'hidden' }\r\n          : {}\r\n      }\r\n    >\r\n      <RotationContainer\r\n        className={getRouletteClass()}\r\n        classKey={classKey}\r\n        startSpinningTime={startSpinningTime}\r\n        continueSpinningTime={continueSpinningTime}\r\n        stopSpinningTime={stopSpinningTime}\r\n        startRotationDegrees={startRotationDegrees}\r\n        finalRotationDegrees={finalRotationDegrees}\r\n      >\r\n        <WheelCanvas\r\n          width=\"900\"\r\n          height=\"900\"\r\n          data={wheelData}\r\n          outerBorderColor={outerBorderColor}\r\n          outerBorderWidth={outerBorderWidth}\r\n          innerRadius={innerRadius}\r\n          innerBorderColor={innerBorderColor}\r\n          innerBorderWidth={innerBorderWidth}\r\n          radiusLineColor={radiusLineColor}\r\n          radiusLineWidth={radiusLineWidth}\r\n          fontFamily={fontFamily}\r\n          fontSize={fontSize}\r\n          perpendicularText={perpendicularText}\r\n          prizeMap={prizeMap}\r\n          rouletteUpdater={rouletteUpdater}\r\n          textDistance={textDistance}\r\n        />\r\n      </RotationContainer>\r\n    </RouletteContainer>\r\n  );\r\n};\r\n","import React, { ReactElement } from 'react';\r\nimport { WheelData } from '../Wheel/types';\r\nimport { Wheel } from '../Wheel/Wheel';\r\n\r\ninterface IPreparedWheel {\r\n  mustStartSpinning: boolean;\r\n  prizeResult: number;\r\n  data: WheelData[];\r\n  textDistance: number;\r\n  wheelSpeed: number;\r\n  wheelStopped: () => void;\r\n}\r\n\r\nexport const PreparedWheel = ({\r\n  mustStartSpinning,\r\n  prizeResult,\r\n  data,\r\n  wheelSpeed,\r\n  textDistance,\r\n  wheelStopped,\r\n}: IPreparedWheel): ReactElement => (\r\n  <Wheel\r\n    textColors={['#ffffff']}\r\n    radiusLineWidth={2}\r\n    innerRadius={0}\r\n    innerBorderWidth={60}\r\n    backgroundColors={['#0133ac', '#011c6b']}\r\n    spinDuration={wheelSpeed}\r\n    outerBorderColor=\"#f5feff\"\r\n    innerBorderColor=\"#f7fcff\"\r\n    radiusLineColor=\"#1957d0\"\r\n    mustStartSpinning={mustStartSpinning}\r\n    prizeNumber={prizeResult}\r\n    data={data}\r\n    textDistance={textDistance}\r\n    onStopSpinning={wheelStopped}\r\n  />\r\n);\r\n","export default __webpack_public_path__ + \"static/media/logo_vulkan.78a644c6.png\";","import React, { ReactElement } from 'react';\r\nimport './ResultString.css';\r\nimport { IResult } from '../../types';\r\n\r\ninterface IResultString {\r\n  result: IResult;\r\n}\r\n\r\nconst getTimeWithZero = count => (count < 10 ? `0${count}` : count);\r\n\r\nconst getCorrectDate = (strDate: string) => {\r\n  const date = new Date(strDate);\r\n\r\n  return `${getTimeWithZero(date.getHours())}: ${getTimeWithZero(\r\n    date.getMinutes()\r\n  )}: ${getTimeWithZero(date.getSeconds())}`;\r\n};\r\n\r\nexport const ResultString = ({ result }: IResultString): ReactElement => (\r\n  <div className=\"resultRow\">\r\n    <div>{getCorrectDate(result.date)}</div>\r\n    <div>{result.value}</div>\r\n  </div>\r\n);\r\n","import React, { ReactElement } from 'react';\r\nimport './ResultTableHeader.css';\r\n\r\nexport const ResultTableHeader = (): ReactElement => (\r\n  <div className=\"tableHeader\">\r\n    <div>Время выигрыша</div>\r\n    <div>Выигрыш</div>\r\n  </div>\r\n);\r\n","import React, { ReactElement } from 'react';\r\nimport './ResultTable.css';\r\nimport { ResultString } from '../ResultString';\r\nimport { IResult } from '../../types';\r\nimport { ResultTableHeader } from '../ResultTableHeader';\r\n\r\ninterface IResultTable {\r\n  resultList: IResult[];\r\n}\r\n\r\nexport const ResultTable = ({ resultList }: IResultTable): ReactElement => (\r\n  <div className=\"table\">\r\n    <ResultTableHeader />\r\n\r\n    <div className=\"tableContent\">\r\n      {resultList.map(result => (\r\n        <ResultString key={result.date} result={result} />\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n","export default __webpack_public_path__ + \"static/media/arrow.b8ff3dd2.svg\";","import React, { ReactElement, useLayoutEffect } from 'react';\r\nimport { WinnerText } from '../WinnerText/WinnerText';\r\nimport { PreparedWheel } from '../PreparedWheel';\r\nimport { WheelData } from '../Wheel/types';\r\nimport logoVulkan from '../../assets/logo_vulkan.png';\r\nimport './Drawing.css';\r\nimport { IResult } from '../../types';\r\nimport { ResultTable } from '../ResultTable';\r\nimport { RoulettePointerImage } from '../Wheel/styles';\r\nimport arrow from '../../assets/arrow.svg';\r\n\r\ninterface IDrawing {\r\n  winnerText: string;\r\n  isShowWinnerText: boolean;\r\n  mustSpin: boolean;\r\n  prizeResult: number;\r\n  drawingData: WheelData[];\r\n  wheelSpeed: number;\r\n  resultList: IResult[];\r\n  textDistance: number;\r\n  pressStartButton: (e: KeyboardEvent) => void;\r\n  wheelStopped: () => void;\r\n  handleSpinClick: () => void;\r\n  saveToLocalState: () => void;\r\n  setIsInitCondition: (value: boolean) => void;\r\n}\r\n\r\nexport const Drawing = ({\r\n  winnerText,\r\n  isShowWinnerText,\r\n  mustSpin,\r\n  prizeResult,\r\n  drawingData,\r\n  wheelSpeed,\r\n  resultList,\r\n  textDistance,\r\n  pressStartButton,\r\n  wheelStopped,\r\n  handleSpinClick,\r\n  saveToLocalState,\r\n  setIsInitCondition,\r\n}: IDrawing): ReactElement => {\r\n  useLayoutEffect(() => {\r\n    return () => {\r\n      saveToLocalState();\r\n      setIsInitCondition(true);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"drawingContainer\"\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      onKeyDown={pressStartButton}\r\n      tabIndex={0}\r\n      role=\"button\"\r\n    >\r\n      <div className=\"info\">\r\n        <WinnerText\r\n          prizeResult={winnerText}\r\n          isShowWinnerText={isShowWinnerText}\r\n        />\r\n        <button type=\"button\" className=\"spinButton\" onClick={handleSpinClick}>\r\n          CLICK ME\r\n        </button>\r\n        <ResultTable resultList={resultList} />\r\n      </div>\r\n      <div className=\"containerWithArrow\">\r\n        <div className=\"wheelContainer\">\r\n          <PreparedWheel\r\n            mustStartSpinning={mustSpin}\r\n            prizeResult={prizeResult}\r\n            data={drawingData}\r\n            wheelSpeed={wheelSpeed}\r\n            textDistance={textDistance}\r\n            wheelStopped={wheelStopped}\r\n          />\r\n          <img src={logoVulkan} alt=\"logo\" className=\"logoImg\" />\r\n        </div>\r\n        <RoulettePointerImage src={arrow} alt=\"roulette-static\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { WheelData } from './components/Wheel/types';\r\n\r\nexport const modes = {\r\n  drawing: 'drawing',\r\n  settings: 'settings',\r\n};\r\n\r\nexport const testDrawingData: WheelData[] = [\r\n  { option: '100', id: '1' },\r\n  { option: '100', id: '2' },\r\n  { option: '100', id: '3' },\r\n  { option: '200', id: '4' },\r\n  { option: '300', id: '5' },\r\n  { option: '400', id: '6' },\r\n  { option: '500', id: '7' },\r\n  { option: '600', id: '8' },\r\n  { option: '700', id: '9' },\r\n  { option: '800', id: '10' },\r\n  { option: '900', id: '11' },\r\n];\r\n","import React, { ReactElement } from 'react';\r\nimport './Button.css';\r\n\r\ninterface IButton {\r\n  text: string;\r\n  classes?: string;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const Button = ({\r\n  text,\r\n  classes = '',\r\n  onClick,\r\n}: IButton): ReactElement => (\r\n  <button type=\"button\" onClick={onClick} className={`btn ${classes}`}>\r\n    {text}\r\n  </button>\r\n);\r\n","import React, { ReactElement } from 'react';\r\nimport { modes } from '../../data';\r\nimport './Header.css';\r\nimport { Button } from '../Button';\r\n\r\ninterface IHeader {\r\n  changeMode: (value: string) => void;\r\n}\r\n\r\nexport const Header = ({ changeMode }: IHeader): ReactElement => (\r\n  <header>\r\n    <Button\r\n      text=\"Розыгрыш\"\r\n      classes=\"changeModeButton\"\r\n      onClick={() => changeMode(modes.drawing)}\r\n    />\r\n    <Button\r\n      text=\"Настройки\"\r\n      classes=\"changeModeButton\"\r\n      onClick={() => changeMode(modes.settings)}\r\n    />\r\n  </header>\r\n);\r\n","import React, { ReactElement } from 'react';\r\nimport './Separator.css';\r\n\r\nexport const Separator = (): ReactElement => <div className=\"separator\" />;\r\n","import React, { ReactElement } from 'react';\r\nimport './Heading.css';\r\n\r\ninterface IHeading {\r\n  text: string;\r\n}\r\n\r\nexport const Heading = ({ text }: IHeading): ReactElement => (\r\n  <h2 className=\"heading\">{text}</h2>\r\n);\r\n","import React, { ReactElement } from 'react';\r\nimport './PresentDescription.css';\r\nimport { Heading } from '../Heading';\r\n\r\ninterface IPresentDescription {\r\n  presentDescription: string;\r\n  setPresentDescription: (value: string) => void;\r\n}\r\n\r\nexport const PresentDescription = ({\r\n  presentDescription,\r\n  setPresentDescription,\r\n}: IPresentDescription): ReactElement => (\r\n  <div className=\"presentDescription\">\r\n    <Heading text=\"Единицы выигрыша\" />\r\n    <p>\r\n      В этом поле можно указать единое значение, которое примениться ко всем\r\n      выигрышам. Например 100 BYN, 5 шт и т.д. Оставьте поле пустым, если не\r\n      хотите использовать такое значение\r\n    </p>\r\n\r\n    <input\r\n      className=\"inputCommon\"\r\n      placeholder=\"Введите значение единиц выигрыша\"\r\n      value={presentDescription}\r\n      onChange={({ target }) => setPresentDescription(target.value)}\r\n    />\r\n  </div>\r\n);\r\n","import React, { ReactElement } from 'react';\r\nimport './PresentList.css';\r\nimport uniqid from 'uniqid';\r\nimport { WheelData } from '../Wheel/types';\r\nimport { Button } from '../Button';\r\nimport { Heading } from '../Heading';\r\n\r\ninterface IHeading {\r\n  drawingData: WheelData[];\r\n  setDrawingData: (newDrawingData: WheelData[]) => void;\r\n}\r\n\r\nexport const PresentList = ({\r\n  drawingData,\r\n  setDrawingData,\r\n}: IHeading): ReactElement => {\r\n  const deleteDrawingData = (value: string) => {\r\n    const newDrawingData = [...drawingData];\r\n    const indexOfOne = drawingData.findIndex(({ option }) => option !== value);\r\n\r\n    newDrawingData.splice(indexOfOne - 1, 1);\r\n    if (!newDrawingData.length) {\r\n      // Have a mistake where data is empty arr\r\n      setDrawingData([{ option: '', id: uniqid() }]);\r\n    } else {\r\n      setDrawingData(newDrawingData);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Heading text=\"Редактировать список призов\" />\r\n      <div className=\"presentList\">\r\n        {drawingData.map(({ option, id }) => {\r\n          if (!option) {\r\n            return null;\r\n          }\r\n\r\n          return (\r\n            <div key={id} className=\"optionContainer\">\r\n              {option}\r\n              <Button\r\n                text=\"Удалить\"\r\n                onClick={() => deleteDrawingData(option)}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { ReactElement, useState } from 'react';\r\nimport uniqid from 'uniqid';\r\nimport { Separator } from '../Separator';\r\nimport { Heading } from '../Heading';\r\nimport { WheelData } from '../Wheel/types';\r\n\r\ninterface IAddNewPresent {\r\n  drawingData: WheelData[];\r\n  setDrawingData: (newDrawingData: WheelData[]) => void;\r\n}\r\n\r\nexport const AddNewPresent = ({\r\n  drawingData,\r\n  setDrawingData,\r\n}: IAddNewPresent): ReactElement => {\r\n  const [newDrawing, setNewDrawing] = useState<string>('');\r\n  const addDrawingData = () => {\r\n    if (!newDrawing.length) {\r\n      return;\r\n    }\r\n\r\n    const drawingArr = newDrawing.split('&');\r\n\r\n    // Filtering for delete empty options. We are adding an empty when user is deleting all presents\r\n    const newDrawingData = [...drawingData].filter(\r\n      ({ option }) => option?.length\r\n    );\r\n    drawingArr.filter(value => value === '');\r\n\r\n    drawingArr.forEach(newValue => {\r\n      newDrawingData.push({\r\n        option: newValue,\r\n        id: uniqid(),\r\n      });\r\n    });\r\n\r\n    setDrawingData(newDrawingData);\r\n    setNewDrawing('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Separator />\r\n      <Heading text=\"Добавить приз\" />\r\n      <p>\r\n        Вы можете добавить призы по одному, каждый раз нажимая кнопку Добавить.\r\n        Либо ввести призы одной строкой используя & как разделитель между\r\n        призами. Например, строчка первый&второй&третий добавит при приза.\r\n      </p>\r\n      <input\r\n        className=\"inputCommon\"\r\n        placeholder=\"Введите значение нового приза\"\r\n        value={newDrawing}\r\n        onChange={({ target }) => setNewDrawing(target.value)}\r\n      />\r\n      <button type=\"button\" className=\"btn\" onClick={addDrawingData}>\r\n        Добавить\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { ReactElement } from 'react';\r\nimport './WheelSpeed.css';\r\nimport { Heading } from '../Heading';\r\n\r\ninterface IWheelSpeed {\r\n  wheelSpeed: number;\r\n  setWheelSpeed: (value: number) => void;\r\n}\r\n\r\nexport const WheelSpeed = ({\r\n  wheelSpeed,\r\n  setWheelSpeed,\r\n}: IWheelSpeed): ReactElement => (\r\n  <div>\r\n    <Heading text=\"Скорость вращения\" />\r\n    <p>Выберите скорость врещения, где 0,2 является самым быстрым</p>\r\n    <select\r\n      name=\"wheelSpeed\"\r\n      id=\"wheelSpeed\"\r\n      className=\"wheelSpeed\"\r\n      value={String(wheelSpeed)}\r\n      onChange={({ target }) => setWheelSpeed(+target.value)}\r\n    >\r\n      <option value={0.2}>0.2</option>\r\n      <option value={0.4}>0.4</option>\r\n      <option value={0.6}>0.6</option>\r\n      <option value={0.8}>0.8</option>\r\n      <option value={1.0}>1.0</option>\r\n    </select>\r\n  </div>\r\n);\r\n","import React, { ReactElement } from 'react';\r\nimport { WheelData } from '../Wheel/types';\r\nimport { testDrawingData } from '../../data';\r\nimport { Button } from '../Button';\r\nimport { Heading } from '../Heading';\r\n\r\ninterface IResetDrawingData {\r\n  setDrawingData: (newDrawingData: WheelData[]) => void;\r\n}\r\n\r\nexport const ResetDrawingData = ({\r\n  setDrawingData,\r\n}: IResetDrawingData): ReactElement => (\r\n  <div className=\"resetContainer\">\r\n    <Heading text=\"Сброс списка призов\" />\r\n    <p>\r\n      Нажмите на кнопку, что бы сбросить список призов к начальному состоянию\r\n    </p>\r\n    <Button text=\"Сбросить\" onClick={() => setDrawingData(testDrawingData)} />\r\n  </div>\r\n);\r\n","import React, { ReactElement } from 'react';\r\nimport { Button } from '../Button';\r\nimport { Heading } from '../Heading';\r\n\r\ninterface IResetResultList {\r\n  resetResultList: () => void;\r\n}\r\n\r\nexport const ResetResultList = ({\r\n  resetResultList,\r\n}: IResetResultList): ReactElement => (\r\n  <div className=\"resetContainer\">\r\n    <Heading text=\"Очистить список результатов\" />\r\n    <p>Нажмите на кнопку, что бы очистить список результатов</p>\r\n    <Button text=\"Очистить\" onClick={resetResultList} />\r\n  </div>\r\n);\r\n","import React, { ReactElement } from 'react';\r\nimport { Separator } from '../Separator';\r\nimport { Heading } from '../Heading';\r\n\r\ninterface IChangeTextDistance {\r\n  textDistance: number;\r\n  setTextDistance: (distance: number) => void;\r\n}\r\n\r\nexport const ChangeTextDistance = ({\r\n  textDistance,\r\n  setTextDistance,\r\n}: IChangeTextDistance): ReactElement => {\r\n  const checkDistanceValue = ({ target }) => {\r\n    const resAsNumber = Number(target.value);\r\n\r\n    if (Number.isNaN(resAsNumber) || resAsNumber > 100) {\r\n      return;\r\n    }\r\n\r\n    setTextDistance(resAsNumber);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Heading text=\"Изменить расстояние до центра\" />\r\n      <p>\r\n        Здесь можно задать отступ выигрыша от центра. Значение должно быть от 0\r\n        (ближе к центу) до 100 (дальше от центра). Эта возможность добавлена для\r\n        того чтобы Администратор мог сам контролировать расстояние в зависимости\r\n        от текущих названий призов. Распространяется на все поля стразу\r\n      </p>\r\n      <input\r\n        className=\"inputCommon\"\r\n        placeholder=\"Введите расстояние текста от центра\"\r\n        value={textDistance}\r\n        onChange={checkDistanceValue}\r\n      />\r\n      <Separator />\r\n    </div>\r\n  );\r\n};\r\n","import React, { ReactElement } from 'react';\r\nimport './Settings.css';\r\nimport { WheelData } from '../Wheel/types';\r\nimport { Separator } from '../Separator';\r\nimport { PresentDescription } from '../PresentDescription';\r\nimport { PresentList } from '../PresentList';\r\nimport { AddNewPresent } from '../AddNewPresent';\r\nimport { WheelSpeed } from '../WheelSpeed';\r\nimport { ResetDrawingData } from '../ResetDrawingData';\r\nimport { ResetResultList } from '../ResetResultList';\r\nimport { ChangeTextDistance } from '../ChangeTextDistance';\r\n\r\ninterface ISettings {\r\n  drawingData: WheelData[];\r\n  presentDescription: string;\r\n  wheelSpeed: number;\r\n  textDistance: number;\r\n  setTextDistance: (distance: number) => void;\r\n  setDrawingData: (newDrawingData: WheelData[]) => void;\r\n  setPresentDescription: (value: string) => void;\r\n  setWheelSpeed: (value: number) => void;\r\n  resetResultList: () => void;\r\n}\r\n\r\nexport const Settings = ({\r\n  drawingData,\r\n  setDrawingData,\r\n  wheelSpeed,\r\n  presentDescription,\r\n  textDistance,\r\n  setTextDistance,\r\n  setPresentDescription,\r\n  setWheelSpeed,\r\n  resetResultList,\r\n}: ISettings): ReactElement => {\r\n  return (\r\n    <div className=\"settingContainer\">\r\n      <div className=\"content\">\r\n        <ResetDrawingData setDrawingData={setDrawingData} />\r\n        <Separator />\r\n\r\n        <ResetResultList resetResultList={resetResultList} />\r\n        <Separator />\r\n\r\n        <PresentList\r\n          drawingData={drawingData}\r\n          setDrawingData={setDrawingData}\r\n        />\r\n\r\n        <AddNewPresent\r\n          drawingData={drawingData}\r\n          setDrawingData={setDrawingData}\r\n        />\r\n        <Separator />\r\n\r\n        <PresentDescription\r\n          presentDescription={presentDescription}\r\n          setPresentDescription={setPresentDescription}\r\n        />\r\n        <Separator />\r\n\r\n        <ChangeTextDistance\r\n          textDistance={textDistance}\r\n          setTextDistance={setTextDistance}\r\n        />\r\n\r\n        <WheelSpeed wheelSpeed={wheelSpeed} setWheelSpeed={setWheelSpeed} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { ReactElement, useState } from 'react';\r\nimport { WheelData } from './components/Wheel/types';\r\nimport { Drawing } from './components/Drawing';\r\nimport { Header } from './components/Header';\r\nimport { testDrawingData, modes } from './data';\r\nimport { Settings } from './components/Settings';\r\nimport { IResult } from './types';\r\n\r\nexport const App = (): ReactElement => {\r\n  const lsPresentDescription = localStorage.getItem('presentDescription');\r\n  const lsWheelSpeed = localStorage.getItem('wheelSpeed');\r\n  const lsDrawingData = localStorage.getItem('drawingData');\r\n  const lsResultList = localStorage.getItem('resultList');\r\n\r\n  const initResultList = lsResultList ? JSON.parse(lsResultList) : [];\r\n\r\n  const initDrawingData = lsDrawingData\r\n    ? JSON.parse(lsDrawingData)\r\n    : testDrawingData;\r\n\r\n  const initWheelSpeed = lsWheelSpeed ? JSON.parse(lsWheelSpeed) : 1.0;\r\n  const initPresentDescription = lsPresentDescription\r\n    ? JSON.parse(lsPresentDescription)\r\n    : 'BYN';\r\n\r\n  const [mustSpin, setMustSpin] = useState<boolean>(false);\r\n  const [prizeResult, setPrizeResult] = useState<number>(0);\r\n  const [isInitCondition, setIsInitCondition] = useState<boolean>(true);\r\n  const [mode, setMode] = useState<string>(modes.settings);\r\n  const [presentDescription, setPresentDescription] = useState<string>(\r\n    initPresentDescription\r\n  );\r\n  const [drawingData, setDrawingData] = useState<WheelData[]>(initDrawingData);\r\n  const [wheelSpeed, setWheelSpeed] = useState<number>(initWheelSpeed);\r\n  const [resultList, setResultList] = useState<IResult[]>(initResultList);\r\n  const [winTextValue, setWinTextValue] = useState<string>('');\r\n  const [textDistance, setTextDistance] = useState<number>(60);\r\n\r\n  const saveToLocalState = () => {\r\n    localStorage.setItem('drawingData', JSON.stringify(drawingData));\r\n    localStorage.setItem('wheelSpeed', JSON.stringify(wheelSpeed));\r\n    localStorage.setItem(\r\n      'presentDescription',\r\n      JSON.stringify(presentDescription)\r\n    );\r\n  };\r\n\r\n  const handleSpinClick = () => {\r\n    if (!mustSpin) {\r\n      setIsInitCondition(false);\r\n      const newPrizeNumber = Math.floor(Math.random() * drawingData.length);\r\n      setPrizeResult(newPrizeNumber);\r\n      setMustSpin(true);\r\n      setMode(modes.drawing);\r\n    }\r\n  };\r\n  const isShowWinnerText = !isInitCondition && !mustSpin;\r\n  const getWinnerText = () => {\r\n    const winRes = drawingData[prizeResult]?.option || '0';\r\n\r\n    return setWinTextValue(`${winRes} ${presentDescription}`);\r\n  };\r\n  const getDrawingData = drawingData.map(wheelOption => ({\r\n    ...wheelOption,\r\n    option: `${wheelOption.option} ${presentDescription}`,\r\n  }));\r\n\r\n  const pressStartButton = (e: KeyboardEvent) => {\r\n    if (e.code === 'Space') {\r\n      handleSpinClick();\r\n    }\r\n  };\r\n\r\n  const saveResultToLs = list => {\r\n    localStorage.setItem('resultList', JSON.stringify(list));\r\n  };\r\n\r\n  const wheelStopped = () => {\r\n    setMustSpin(false);\r\n    getWinnerText();\r\n\r\n    const newResultList: IResult[] = [\r\n      {\r\n        date: String(new Date()),\r\n        value: drawingData[prizeResult]?.option || '',\r\n      },\r\n      ...resultList,\r\n    ];\r\n\r\n    setResultList(newResultList);\r\n    saveResultToLs(newResultList);\r\n  };\r\n\r\n  const resetResultList = () => {\r\n    setResultList([]);\r\n    saveResultToLs([]);\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <Header changeMode={setMode} />\r\n      {mode === modes.drawing && (\r\n        <Drawing\r\n          winnerText={winTextValue}\r\n          drawingData={getDrawingData}\r\n          isShowWinnerText={isShowWinnerText}\r\n          mustSpin={mustSpin}\r\n          prizeResult={prizeResult}\r\n          wheelSpeed={wheelSpeed}\r\n          resultList={resultList}\r\n          textDistance={textDistance}\r\n          pressStartButton={pressStartButton}\r\n          wheelStopped={wheelStopped}\r\n          handleSpinClick={handleSpinClick}\r\n          saveToLocalState={saveToLocalState}\r\n          setIsInitCondition={setIsInitCondition}\r\n        />\r\n      )}\r\n      {mode === modes.settings && (\r\n        <Settings\r\n          drawingData={drawingData}\r\n          setDrawingData={setDrawingData}\r\n          setPresentDescription={setPresentDescription}\r\n          presentDescription={presentDescription}\r\n          wheelSpeed={wheelSpeed}\r\n          textDistance={textDistance}\r\n          setTextDistance={setTextDistance}\r\n          setWheelSpeed={setWheelSpeed}\r\n          resetResultList={resetResultList}\r\n        />\r\n      )}\r\n    </main>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport { App } from './App';\r\n\r\nexport { Wheel } from './components/Wheel/Wheel';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}